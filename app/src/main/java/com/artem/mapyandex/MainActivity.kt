package com.artem.mapyandex

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.graphics.Color
import android.graphics.PointF
import android.graphics.Typeface
import android.os.Bundle
import android.os.Handler
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.content.res.ResourcesCompat
import com.yandex.mapkit.Animation
import com.yandex.mapkit.MapKitFactory
import com.yandex.mapkit.geometry.Point
import com.yandex.mapkit.location.*
import com.yandex.mapkit.map.CameraPosition
import com.yandex.mapkit.mapview.MapView
import com.yandex.mapkit.map.MapObjectCollection
import com.yandex.mapkit.map.PlacemarkMapObject
import com.yandex.runtime.image.ImageProvider
import java.util.Locale
import com.yandex.mapkit.map.IconStyle
import com.yandex.mapkit.map.RotationType

class MainActivity : AppCompatActivity() {
    private lateinit var mapView: MapView
    private lateinit var speedTextView: TextView
    private lateinit var plusButton: Button
    private lateinit var minusButton: Button
    private var mapObjects: MapObjectCollection? = null
    private var userLocationPlacemark: PlacemarkMapObject? = null
    private var locationManager: LocationManager? = null
    private var locationListener: LocationListener? = null
    // zoom
    private var currentZoom = 19.0f

    // –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    private var previousLocation: Location? = null
    val dataClass = DataClass()
    private val cameraPoints = dataClass.cameraPoints
    private val detectionRadius = dataClass.detectionRadius

    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ–π –∫–∞–º–µ—Ä–µ
    private val processedCameras = mutableSetOf<Point>()

    // TextView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ
    private lateinit var cameraAlertTextView: TextView

    private val locationPermissionRequest = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            startLocationUpdates()
        } else {
            setDefaultLocation()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // –í–°–ï–ì–î–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MapKit - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –∫–∞—Ä—Ç—ã –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ –≤ Auto
        try {
            MapKitFactory.setApiKey(dataClass.apoKey)
            MapKitFactory.initialize(this)
            Log.d("MapKit", "‚úÖ MapKit initialized for both phone and Auto")
        } catch (e: Exception) {
            Log.e("MapKit", "‚ùå MapKit init error: ${e.message}")
        }

        enableEdgeToEdge()
        setContentView(R.layout.activity_main)

        // –û–±—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
        mapView = findViewById(R.id.mapview)
        mapView.map.isNightModeEnabled = true

        speedTextView = findViewById(R.id.speedTextView)
        plusButton = findViewById(R.id.plus)
        minusButton = findViewById(R.id.minus)
        cameraAlertTextView = findViewById(R.id.cameraAlertTextView)

        setupSpeedView()
        setupCameraAlertView()

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –∫–∞–º–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ Auto –∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ)
        mapObjects = mapView.mapWindow.map.mapObjects.addCollection()
        setupCameraMarkers()

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Auto
        initializeAutoData()

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞—Ü–∏–∏
        checkLocationPermission()

        Handler().postDelayed({
            forceSendTestData()
        }, 3000)

        Log.d("MainActivity", "üéØ App started - ready for phone and Auto")
    }

    private fun forceSendTestData() {
        val testLocation = Location(
            Point(56.838011, 60.597465), // –¶–µ–Ω—Ç—Ä –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞
            15.0,
            250.0,
            null,
            90.0,
            0.0,
            null,
            System.currentTimeMillis(),
            0L
        )
        sendEnhancedDataToCarApp(testLocation)
        Log.d("Phone", "üîÑ FORCED test data sent to Auto")
    }

    private fun setupCameraMarkers() {
        try {
            Log.d("CameraMarkers", "üìç Setting up camera markers on map")

            val cameraImageProvider = ImageProvider.fromResource(this, R.drawable.camera_point)

            cameraPoints.forEach { point ->
                mapObjects?.addPlacemark()?.apply {
                    geometry = point
                    setIcon(cameraImageProvider)
                    setIconStyle(IconStyle().apply {
                        scale = 0.1f
                        anchor = PointF(0.5f, 1.0f)
                    })
                }
            }

            Log.d("CameraMarkers", "‚úÖ Added ${cameraPoints.size} camera markers to map")

        } catch (e: Exception) {
            Log.e("CameraMarkers", "‚ùå Error setting up camera markers: ${e.message}")
        }
    }

    private fun initializeAutoData() {
        val sharedPref = getSharedPreferences("car_data", Context.MODE_PRIVATE)
        with(sharedPref.edit()) {
            putFloat("current_lat", 0f)
            putFloat("current_lon", 0f)
            putInt("current_speed", 0)
            putString("nearest_camera", "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            putString("camera_alert", "")
            putLong("last_update_time", System.currentTimeMillis())
            apply()
        }
        Log.d("AutoDebug", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Auto")
    }

    private fun setupSpeedView() {
        speedTextView.apply {
            setTextColor(Color.WHITE)
            textSize = 40f
            setPadding(24, 12, 24, 12)
            text = "0 –∫–º/—á"
            background = null // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            setShadowLayer(6f, 0f, 0f, Color.BLACK) // –¢–µ–Ω—å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            val typeface = ResourcesCompat.getFont(this@MainActivity, R.font.geologica)
            setTypeface(typeface, Typeface.BOLD_ITALIC)
        }
    }

    private fun setupCameraAlertView() {
        cameraAlertTextView.apply {
            setBackgroundResource(android.R.drawable.btn_default)
            setTextColor(ContextCompat.getColor(this@MainActivity, android.R.color.white))
            setBackgroundColor(ContextCompat.getColor(this@MainActivity, android.R.color.holo_red_dark))
            textSize = 16f
            setPadding(20, 10, 20, 10)
            text = ""
            visibility = View.GONE
        }
    }

    private fun checkLocationPermission() {
        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            startLocationUpdates()
        } else {
            locationPermissionRequest.launch(Manifest.permission.ACCESS_FINE_LOCATION)
        }
    }

    private fun startLocationUpdates() {
        val isAutomotive = packageManager.hasSystemFeature("android.hardware.type.automotive")

        if (isAutomotive) {
            Log.d("LocationDebug", "üöó ANDROID AUTO - Receiving location from phone")
            // –í Android Auto –ù–ï –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é, –∞ —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SharedPreferences
            startLocationListeningFromPhone()

        } else {
            Log.d("LocationDebug", "üì± PHONE MODE - Getting real location and sending to Auto")
            // –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Auto
            startMapKitLocation()
        }
    }

    private fun startSendingLocationToAuto() {
        Log.d("AutoSync", "üì§ Starting to send location to Android Auto")

        val handler = android.os.Handler()
        handler.postDelayed(object : Runnable {
            override fun run() {
                // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Auto
                val sharedPref = getSharedPreferences("car_data", Context.MODE_PRIVATE)

                // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                val lastUpdate = sharedPref.getLong("last_update_time", 0)
                val dataAge = (System.currentTimeMillis() - lastUpdate) / 1000

                Log.d("AutoSync", "üìä Auto sync status: data age = ${dataAge}sec")

                handler.postDelayed(this, 2000) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            }
        }, 1000)
    }

    private fun startLocationListeningFromPhone() {
        Log.d("AutoListen", "üì• Android Auto listening for phone location")

        val handler = android.os.Handler()
        handler.postDelayed(object : Runnable {
            override fun run() {
                val sharedPref = getSharedPreferences("car_data", Context.MODE_PRIVATE)

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                val lat = sharedPref.getFloat("current_lat", 0f)
                val lon = sharedPref.getFloat("current_lon", 0f)
                val speed = sharedPref.getInt("current_speed", 0)
                val lastUpdate = sharedPref.getLong("last_update_time", 0)

                val dataAge = (System.currentTimeMillis() - lastUpdate) / 1000

                if (lat != 0f && lon != 0f) {
                    Log.d("AutoListen", "üìç Received from phone: ${"%.6f".format(lat)}, ${"%.6f".format(lon)}, speed: $speed km/h, age: ${dataAge}sec")

                    // –°–æ–∑–¥–∞–µ–º Yandex Location –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    val locationFromPhone = Location(
                        Point(lat.toDouble(), lon.toDouble()),
                        10.0, // accuracy
                        0.0,  // altitude
                        null,
                        null, // heading
                        (speed / 3.6), // speed (convert km/h to m/s)
                        null,
                        lastUpdate,
                        0L
                    )

                    // –û–ë–ù–û–í–õ–Ø–ï–ú –ö–ê–†–¢–£ –í ANDROID AUTO!
                    updateUserLocation(locationFromPhone)
                    updateSpeed(locationFromPhone)

                } else {
                    Log.d("AutoListen", "‚è≥ Waiting for location data from phone...")
                }

                handler.postDelayed(this, 1000) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            }
        }, 500)
    }

    private fun startCustomGpsInAuto() {
        Log.d("AutoGPS", "üöÄ Starting custom GPS for Android Auto")

        try {
            val locationManager = getSystemService(Context.LOCATION_SERVICE) as android.location.LocationManager

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Android Auto
            val availableProviders = locationManager.allProviders
            Log.d("AutoGPS", "üì° Available providers in Auto: ${availableProviders.joinToString()}")

            // –í Android Auto –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            val provider = when {
                locationManager.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER) -> {
                    Log.d("AutoGPS", "‚úÖ Using GPS_PROVIDER")
                    android.location.LocationManager.GPS_PROVIDER
                }
                locationManager.isProviderEnabled(android.location.LocationManager.NETWORK_PROVIDER) -> {
                    Log.d("AutoGPS", "‚úÖ Using NETWORK_PROVIDER")
                    android.location.LocationManager.NETWORK_PROVIDER
                }
                locationManager.isProviderEnabled(android.location.LocationManager.PASSIVE_PROVIDER) -> {
                    Log.d("AutoGPS", "‚úÖ Using PASSIVE_PROVIDER")
                    android.location.LocationManager.PASSIVE_PROVIDER
                }
                else -> {
                    Log.w("AutoGPS", "‚ùå No location providers available, using simulation")
                    null
                }
            }

            if (provider != null && ContextCompat.checkSelfPermission(
                    this,
                    Manifest.permission.ACCESS_FINE_LOCATION
                ) == PackageManager.PERMISSION_GRANTED) {

                // –°–æ–∑–¥–∞–µ–º listener –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                val locationListener = object : android.location.LocationListener {
                    override fun onLocationChanged(location: android.location.Location) {
                        Log.d("AutoGPS", "üìç Real location received: ${location.latitude}, ${location.longitude}")

                        val yandexLocation = Location(
                            Point(location.latitude, location.longitude),
                            location.accuracy.toDouble(),
                            location.altitude,
                            null,
                            if (location.hasBearing()) location.bearing.toDouble() else null,
                            if (location.hasSpeed()) location.speed.toDouble() else null,
                            null,
                            location.time,
                            0L
                        )

                        updateUserLocation(yandexLocation)
                        updateSpeed(yandexLocation)
                        checkCameraProximity(yandexLocation)
                        sendEnhancedDataToCarApp(yandexLocation)
                    }

                    override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {
                        Log.d("AutoGPS", "üìä Location status changed: $provider -> $status")
                    }

                    override fun onProviderEnabled(provider: String) {
                        Log.d("AutoGPS", "‚úÖ Provider enabled: $provider")
                    }

                    override fun onProviderDisabled(provider: String) {
                        Log.d("AutoGPS", "‚ùå Provider disabled: $provider")
                    }
                }

                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
                locationManager.requestLocationUpdates(
                    provider,
                    1000L, // 1 —Å–µ–∫—É–Ω–¥–∞
                    1f,    // 1 –º–µ—Ç—Ä
                    locationListener
                )

                Log.d("AutoGPS", "‚úÖ Custom GPS started with provider: $provider")

                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
                val lastLocation = locationManager.getLastKnownLocation(provider)
                lastLocation?.let { location ->
                    Log.d("AutoGPS", "üìå Using last known location: ${location.latitude}, ${location.longitude}")

                    // –°–æ–∑–¥–∞–µ–º Yandex Location –∏–∑ Android Location
                    val yandexLocation = Location(
                        Point(location.latitude, location.longitude),
                        location.accuracy.toDouble(),
                        location.altitude,
                        null,
                        if (location.hasBearing()) location.bearing.toDouble() else null,
                        if (location.hasSpeed()) location.speed.toDouble() else null,
                        null,
                        location.time,
                        0L
                    )

                    updateUserLocation(yandexLocation)
                    updateSpeed(yandexLocation)
                    checkCameraProximity(yandexLocation)
                    sendEnhancedDataToCarApp(yandexLocation)
                }

            } else {
                Log.w("AutoGPS", "üö® No valid provider or permission, starting simulation")
                // Fallback - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
                //startSmoothCircularSimulation()
            }

        } catch (e: SecurityException) {
            Log.e("AutoGPS", "üîí Permission denied: ${e.message}")
            //startSmoothCircularSimulation()
        } catch (e: Exception) {
            Log.e("AutoGPS", "üí• Error starting custom GPS: ${e.message}")
            //startSmoothCircularSimulation()
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ Auto
    private fun startDataSyncService() {
        val handler = android.os.Handler()
        handler.postDelayed(object : Runnable {
            override fun run() {
                // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Auto
                val sharedPref = getSharedPreferences("car_data", Context.MODE_PRIVATE)

                // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                val lat = sharedPref.getFloat("current_lat", 0f)
                val lon = sharedPref.getFloat("current_lon", 0f)
                val speed = sharedPref.getInt("current_speed", 0)

                Log.d("DataSync", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Auto: lat=$lat, lon=$lon, speed=$speed")

                handler.postDelayed(this, 2000) // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            }
        }, 1000)
    }

    private fun sendEnhancedDataToCarApp(location: Location) {
        val sharedPref = getSharedPreferences("car_data", Context.MODE_PRIVATE)

        val nearestCameraInfo = calculateNearestCameraInfo(location.position)
        val speedKmh = getCurrentSpeedKmh(location)
        val alertText = if (cameraAlertTextView.visibility == View.VISIBLE) {
            cameraAlertTextView.text.toString()
        } else {
            ""
        }

        with(sharedPref.edit()) {
            putFloat("current_lat", location.position.latitude.toFloat())
            putFloat("current_lon", location.position.longitude.toFloat())
            putInt("current_speed", speedKmh.toInt())
            putString("nearest_camera", nearestCameraInfo)
            putString("camera_alert", alertText)
            putLong("last_update_time", System.currentTimeMillis())
            apply()
        }

        val isAutomotive = packageManager.hasSystemFeature("android.hardware.type.automotive")
        if (!isAutomotive) {
            Log.d("PhoneToAuto", "üì§ PHONE ‚Üí AUTO: " +
                    "Lat: ${"%.6f".format(location.position.latitude)}, " +
                    "Lon: ${"%.6f".format(location.position.longitude)}, " +
                    "Speed: ${speedKmh.toInt()} km/h")
        }
    }

    private fun forceRealGpsInEmulator() {
        try {
            val locationManager = getSystemService(Context.LOCATION_SERVICE) as android.location.LocationManager

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPS –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if (locationManager.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER)) {
                val locationListener = object : android.location.LocationListener {
                    override fun onLocationChanged(location: android.location.Location) {
                        Log.d("RealGPS", "Real location: ${location.latitude}, ${location.longitude}")

                        val yandexLocation = Location(
                            Point(location.latitude, location.longitude),
                            location.accuracy.toDouble(),
                            location.altitude,
                            null,
                            if (location.hasBearing()) location.bearing.toDouble() else null,
                            if (location.hasSpeed()) location.speed.toDouble() else null,
                            null,
                            location.time,
                            0L
                        )

                        updateUserLocation(yandexLocation)
                        updateSpeed(yandexLocation)
                        checkCameraProximity(yandexLocation)
                        sendEnhancedDataToCarApp(yandexLocation)
                    }

                    override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {}
                    override fun onProviderEnabled(provider: String) {}
                    override fun onProviderDisabled(provider: String) {}
                }

                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                    locationManager.requestLocationUpdates(
                        android.location.LocationManager.GPS_PROVIDER,
                        1000L,
                        1f,
                        locationListener
                    )
                    Log.d("RealGPS", "Real GPS updates started")
                }
            }
        } catch (e: Exception) {
            Log.e("RealGPS", "Real GPS failed: ${e.message}")
        }
    }

    private fun startMapKitLocation() {
        try {
            locationManager = MapKitFactory.getInstance().createLocationManager()

            locationListener = object : LocationListener {
                override fun onLocationUpdated(location: Location) {
                    Log.d("LocationDebug", "MapKit Location updated: ${location.position}")
                    updateUserLocation(location)
                    updateSpeed(location)
                    checkCameraProximity(location)
                    sendLocationToCarApp(location)
                }

                override fun onLocationStatusUpdated(status: LocationStatus) {
                    Log.d("LocationDebug", "MapKit Location status: $status")
                }
            }

            val subscriptionSettings = SubscriptionSettings(
                UseInBackground.DISALLOW,
                Purpose.AUTOMOTIVE_NAVIGATION
            )

            locationListener?.let { listener ->
                locationManager?.subscribeForLocationUpdates(subscriptionSettings, listener)
            }

        } catch (e: Exception) {
            Log.e("LocationDebug", "MapKit location failed: ${e.message}")
            //setupEmulatorLocation()
        }
    }

//    private fun setupEmulatorLocation() {
//        Log.d("EmulatorDebug", "Setting up emulator location")
//
//        val basePoint = Point(56.791660, 60.651930)
//
//        val simulatedLocation = Location(
//            basePoint,
//            15.0,
//            250.0,
//            null,
//            90.0,
//            13.9,
//            null,
//            System.currentTimeMillis(),
//            0L
//        )
//
//        updateUserLocation(simulatedLocation)
//        updateSpeed(simulatedLocation)
//        sendLocationToCarApp(simulatedLocation)
//
//        Log.d("EmulatorDebug", "Emulator location set: $basePoint")
//    }

//    private fun startAutoDataSimulation() {
//        val handler = android.os.Handler()
//
//        // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
//        val routePoints = listOf(
//            Point(56.791660, 60.651930), // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
//            Point(56.792000, 60.652500),
//            Point(56.792300, 60.653000),
//            Point(56.792600, 60.653500),
//            Point(56.792900, 60.654000),
//            Point(56.793200, 60.654500),
//            Point(56.793500, 60.655000),
//            Point(56.793800, 60.655500),
//            Point(56.794100, 60.656000)
//        )
//
//        var currentPointIndex = 0
//        var interpolationFactor = 0f
//
//        handler.postDelayed(object : Runnable {
//            override fun run() {
//                val isAutomotive = packageManager.hasSystemFeature("android.hardware.type.automotive")
//                if (isAutomotive) {
//                    // –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
//                    val startPoint = routePoints[currentPointIndex]
//                    val endPoint = routePoints[(currentPointIndex + 1) % routePoints.size]
//
//                    // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
//                    val currentLat = startPoint.latitude + (endPoint.latitude - startPoint.latitude) * interpolationFactor
//                    val currentLon = startPoint.longitude + (endPoint.longitude - startPoint.longitude) * interpolationFactor
//
//                    // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (50-60 –∫–º/—á)
//                    val baseSpeed = 14.5 // ~52 –∫–º/—á
//                    val speedVariation = Math.sin(interpolationFactor * Math.PI * 2) * 0.5 // ¬±0.5 –º/—Å
//                    val currentSpeed = baseSpeed + speedVariation
//
//                    // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//                    val deltaLat = endPoint.latitude - startPoint.latitude
//                    val deltaLon = endPoint.longitude - startPoint.longitude
//                    val currentHeading = Math.toDegrees(Math.atan2(deltaLon, deltaLat)).toFloat()
//
//                    val simulatedLocation = Location(
//                        Point(currentLat, currentLon),
//                        10.0, // accuracy
//                        250.0, // altitude
//                        null,
//                        currentHeading.toDouble(), // heading
//                        currentSpeed, // speed
//                        null,
//                        System.currentTimeMillis(),
//                        0L
//                    )
//
//                    updateUserLocation(simulatedLocation)
//                    updateSpeed(simulatedLocation)
//                    sendLocationToCarApp(simulatedLocation)
//
//                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
//                    interpolationFactor += 0.05f // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
//
//                    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
//                    if (interpolationFactor >= 1.0f) {
//                        interpolationFactor = 0f
//                        currentPointIndex = (currentPointIndex + 1) % routePoints.size
//                        Log.d("AutoSimulation", "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ—á–∫–µ $currentPointIndex")
//                    }
//
//                    Log.d("AutoSimulation", "–ü–æ–∑–∏—Ü–∏—è: ${"%.6f".format(currentLat)}, ${"%.6f".format(currentLon)}")
//                }
//                handler.postDelayed(this, 500) // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500–º—Å - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
//            }
//        }, 500)
//    }

    private fun checkCameraProximity(currentLocation: Location) {
        runOnUiThread {
            try {
                val userPoint = currentLocation.position
                var nearestCamera: Point? = null
                var minDistance = Double.MAX_VALUE

                // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –∫–∞–º–µ—Ä—É
                for (cameraPoint in cameraPoints) {
                    val distance = calculateDistance(userPoint, cameraPoint)
                    if (distance < minDistance) {
                        minDistance = distance
                        nearestCamera = cameraPoint
                    }
                }

                // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
                if (nearestCamera != null && minDistance <= detectionRadius) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –∫–∞–º–µ—Ä—É
                    if (!processedCameras.contains(nearestCamera)) {
                        // –§–∏–∫—Å–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                        val speedKmh = getCurrentSpeedKmh(currentLocation)
                        showCameraAlert(speedKmh, minDistance)

                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                        processedCameras.add(nearestCamera)

                        Log.d("CameraDebug", "Camera detected! Speed: $speedKmh km/h, Distance: $minDistance m")
                    }
                } else {
                    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ –∑–æ–Ω—ã –∫–∞–º–µ—Ä—ã
                    if (minDistance > detectionRadius * 1.5) {
                        hideCameraAlert()
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –¥–æ –∫–∞–º–µ—Ä—ã
                updateCameraDistanceInfo(minDistance)

            } catch (e: Exception) {
                Log.e("CameraDebug", "Error checking camera proximity: ${e.message}")
            }
        }
    }

    private fun getCurrentSpeedKmh(location: Location): Double {
        return when {
            location.speed != null -> {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º/—Å –≤ –∫–º/—á
                location.speed!! * 3.6
            }
            else -> {
                // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—é
                calculateSpeedFromMovement(location)
            }
        }
    }

    private fun showCameraAlert(speedKmh: Double, distance: Double) {
        cameraAlertTextView.visibility = View.VISIBLE
        val speedText = String.format(Locale.getDefault(), "%.0f", speedKmh)
        val distanceText = String.format(Locale.getDefault(), "%.0f", distance)

        cameraAlertTextView.text = "–ö–ê–ú–ï–†–ê! –°–∫–æ—Ä–æ—Å—Ç—å: $speedText –∫–º/—á"

        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        when {
            speedKmh > 100 -> {
                cameraAlertTextView.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))
            }
            speedKmh > 80 -> {
                cameraAlertTextView.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_orange_dark))
            }
            else -> {
                cameraAlertTextView.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_dark))
            }
        }
    }

    private fun hideCameraAlert() {
        cameraAlertTextView.visibility = View.GONE
    }

    private fun updateCameraDistanceInfo(distance: Double) {
        if (distance < detectionRadius * 3) {
            val distanceText = String.format(Locale.getDefault(), "%.0f", distance)
            Log.d("CameraDebug", "Distance to nearest camera: $distance m")
        }
    }

    private fun sendLocationToCarApp(location: Location) {
        val sharedPref = getSharedPreferences("car_data", Context.MODE_PRIVATE)

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –∫–∞–º–µ—Ä—É
        val nearestCameraInfo = calculateNearestCameraInfo(location.position)

        with(sharedPref.edit()) {
            putFloat("current_lat", location.position.latitude.toFloat())
            putFloat("current_lon", location.position.longitude.toFloat())
            putInt("current_speed", getCurrentSpeedKmh(location).toInt())
            putString("nearest_camera", nearestCameraInfo)
            apply()
        }

        Log.d("AutoDebug", "Data sent to Auto: ${location.position}, $nearestCameraInfo")
    }

    private fun calculateNearestCameraInfo(userPosition: Point): String {
        var minDistance = Double.MAX_VALUE

        for (cameraPoint in cameraPoints) {
            val distance = calculateDistance(userPosition, cameraPoint)
            if (distance < minDistance) {
                minDistance = distance
            }
        }

        return when {
            minDistance < 50 -> "üö® –û–ß–ï–ù–¨ –ë–õ–ò–ó–ö–û! ${minDistance.toInt()} –º"
            minDistance < 200 -> "‚ö†Ô∏è –ë–ª–∏–∑–∫–æ ${minDistance.toInt()} –º"
            minDistance < 500 -> "üì∑ ${minDistance.toInt()} –º –≤–ø–µ—Ä–µ–¥–∏"
            minDistance < 1000 -> "üëÄ –î–∞–ª–µ–∫–æ ${minDistance.toInt()} –º"
            else -> "‚úÖ –ö–∞–º–µ—Ä –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç"
        }
    }

    private fun updateUserLocation(location: Location) {
        runOnUiThread {
            try {
                val isAutomotive = packageManager.hasSystemFeature("android.hardware.type.automotive")

                if (isAutomotive) {
                    // –í ANDROID AUTO: –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É
                    Log.d("AutoMap", "üìç Adding user location to Auto map: ${location.position}")

                    if (mapObjects == null && ::mapView.isInitialized) {
                        mapObjects = mapView.mapWindow.map.mapObjects.addCollection()
                    }

                    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–µ—Ç–∫—É
                    userLocationPlacemark?.let {
                        mapObjects?.remove(it)
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –°–ò–ù–ï–ì–û —Ü–≤–µ—Ç–∞
                    userLocationPlacemark = mapObjects?.addPlacemark(location.position)
                    userLocationPlacemark?.apply {
                        isDraggable = false
                        setIcon(ImageProvider.fromResource(this@MainActivity, R.drawable.icon_auto))
                        setIconStyle(IconStyle().apply {
                            anchor = PointF(0.5f, 1.0f)
                            scale = 0.1f
                            rotationType = RotationType.NO_ROTATION
                            zIndex = 100.0f
                        })
                    }

                    // –î–≤–∏–≥–∞–µ–º –∫–∞–º–µ—Ä—É –∫ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    val cameraPosition = CameraPosition(
                        location.position,
                        currentZoom,
                        0.0f, // –∞–∑–∏–º—É—Ç
                        60.0f // –Ω–∞–∫–ª–æ–Ω
                    )

                    mapView.map.move(
                        cameraPosition,
                        Animation(Animation.Type.SMOOTH, 0.5f),
                        null
                    )

                    Log.d("AutoMap", "‚úÖ User location updated on Auto map")

                } else {
                    // –ù–ê –¢–ï–õ–ï–§–û–ù–ï: –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ (—Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
                    if (mapObjects == null) {
                        mapObjects = mapView.mapWindow.map.mapObjects.addCollection()
                    }

                    userLocationPlacemark?.let {
                        mapObjects?.remove(it)
                    }

                    userLocationPlacemark = mapObjects?.addPlacemark(location.position)
                    userLocationPlacemark?.apply {
                        isDraggable = false
                        setIcon(ImageProvider.fromResource(this@MainActivity, R.drawable.icon_auto))
                        setIconStyle(IconStyle().apply {
                            anchor = PointF(0.5f, 1.0f)
                            scale = 0.1f
                            rotationType = RotationType.NO_ROTATION
                            zIndex = 100.0f
                        })
                    }

                    val azimuth = calculateAzimuth(location)
                    val cameraPosition = CameraPosition(
                        location.position,
                        currentZoom,
                        azimuth,
                        60.0f
                    )

                    mapView.map.move(
                        cameraPosition,
                        Animation(Animation.Type.SMOOTH, 0.3f),
                        null
                    )
                }

                previousLocation = location
                sendEnhancedDataToCarApp(location)

            } catch (e: Exception) {
                Log.e("LocationDebug", "‚ùå Error updating user location: ${e.message}")
            }
        }
    }

    private fun updateCameraZoom() {
        val cameraPosition = CameraPosition(
            mapView.map.cameraPosition.target,
            currentZoom,
            mapView.map.cameraPosition.azimuth,
            mapView.map.cameraPosition.tilt
        )

        mapView.map.move(
            cameraPosition,
            Animation(Animation.Type.SMOOTH, 0.3f),
            null
        )
    }

    private fun updateSpeed(location: Location) {
        runOnUiThread {
            try {
                val speedKmh = getCurrentSpeedKmh(location)

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                val speedText = if (speedKmh > 0) {
                    String.format(Locale.getDefault(), "%.0f –∫–º/—á", speedKmh)
                } else {
                    "0 –∫–º/—á"
                }

                speedTextView.text = speedText

                Log.d("SpeedDebug", "Speed: $speedKmh km/h")

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Android Auto
                val alertText = if (cameraAlertTextView.visibility == View.VISIBLE) {
                    cameraAlertTextView.text.toString()
                } else {
                    ""
                }

                sendDataToCarApp(speedKmh, alertText)

            } catch (e: Exception) {
                Log.e("SpeedDebug", "Error updating speed: ${e.message}")
            }
        }
    }

    private fun sendDataToCarApp(speed: Double, cameraAlert: String) {
        val sharedPref = getSharedPreferences("car_data", Context.MODE_PRIVATE)
        with(sharedPref.edit()) {
            putInt("current_speed", speed.toInt())
            putString("camera_alert", cameraAlert)
            apply()
        }
    }

    private fun calculateSpeedFromMovement(currentLocation: Location): Double {
        previousLocation?.let { prev ->
            val timeDiff = (currentLocation.absoluteTimestamp - prev.absoluteTimestamp) / 1000.0
            if (timeDiff > 0) {
                val distance = calculateDistance(prev.position, currentLocation.position)
                val speedMs = distance / timeDiff
                return speedMs * 3.6
            }
        }
        return 0.0
    }

    private fun calculateAzimuth(currentLocation: Location): Float {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (currentLocation.heading != null) {
            return currentLocation.heading!!.toFloat()
        }

        // –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        previousLocation?.let { prev ->
            val prevPoint = prev.position
            val currentPoint = currentLocation.position

            val deltaX = currentPoint.longitude - prevPoint.longitude
            val deltaY = currentPoint.latitude - prevPoint.latitude

            // –í—ã—á–∏—Å–ª—è–µ–º –∞–∑–∏–º—É—Ç –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
            val azimuthRad = Math.atan2(deltaX, deltaY)
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥—É—Å—ã
            val azimuthDeg = Math.toDegrees(azimuthRad).toFloat()

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç 0 –¥–æ 360
            return if (azimuthDeg >= 0) azimuthDeg else azimuthDeg + 360
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ - –∫–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Å–µ–≤–µ—Ä
        return 0.0f
    }

    private fun calculateDistance(point1: Point, point2: Point): Double {
        val earthRadius = 6371000.0

        val lat1 = Math.toRadians(point1.latitude)
        val lon1 = Math.toRadians(point1.longitude)
        val lat2 = Math.toRadians(point2.latitude)
        val lon2 = Math.toRadians(point2.longitude)

        val dLat = lat2 - lat1
        val dLon = lon2 - lon1

        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1) * Math.cos(lat2) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2)
        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))

        return earthRadius * c
    }

    private fun setDefaultLocation() {
        val defaultPoint = Point(56.791660, 60.651930)
        runOnUiThread {
            try {
                if (mapObjects == null) {
                    mapObjects = mapView.mapWindow.map.mapObjects.addCollection()
                }

                userLocationPlacemark?.let {
                    mapObjects?.remove(it)
                }

                userLocationPlacemark = mapObjects?.addPlacemark(defaultPoint)
                userLocationPlacemark?.apply {
                    setText("–ê–≤—Ç–æ–º–æ–±–∏–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
                    isDraggable = false
                    setIcon(ImageProvider.fromResource(this@MainActivity, R.drawable.icon_auto))
                }

                // –ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –Ω–∞–∫–ª–æ–Ω–æ–º
                val cameraPosition = CameraPosition(
                    defaultPoint,
                    17.0f,
                    0.0f,
                    60.0f
                )

                mapView.map.move(cameraPosition)

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å 0
                speedTextView.text = "0 –∫–º/—á"

                Log.d("LocationDebug", "Default location set with navigation view")

                val sharedPref = getSharedPreferences("car_data", Context.MODE_PRIVATE)
                with(sharedPref.edit()) {
                    putFloat("current_lat", defaultPoint.latitude.toFloat())
                    putFloat("current_lon", defaultPoint.longitude.toFloat())
                    putInt("current_speed", 0)
                    putString("nearest_camera", "–†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    apply()
                }
            } catch (e: Exception) {
                Log.e("LocationDebug", "Error setting default location: ${e.message}")
            }
        }
    }

    private fun stopLocationUpdates() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MapKit LocationManager
        try {
            locationListener?.let { listener ->
                locationManager?.unsubscribe(listener)
            }
        } catch (e: Exception) {
            Log.e("LocationDebug", "Error stopping MapKit location: ${e.message}")
        }

        locationListener = null
        locationManager = null

        Log.d("LocationDebug", "Location updates stopped")
    }

    override fun onStart() {
        super.onStart()
        MapKitFactory.getInstance().onStart()
        mapView.onStart()

        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            startLocationUpdates()
        }
    }

    override fun onStop() {
        stopLocationUpdates()
        mapView.onStop()
        MapKitFactory.getInstance().onStop()
        super.onStop()
    }

    override fun onDestroy() {
        stopLocationUpdates()
        super.onDestroy()
    }
}